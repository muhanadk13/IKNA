version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: anki_postgres
    environment:
      POSTGRES_DB: anki_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - anki_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: anki_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - anki_network
    restart: unless-stopped

  # Backend API
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: anki_server
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=anki_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CLIENT_URL=http://localhost:5173
    ports:
      - "4000:4000"
    depends_on:
      - postgres
      - redis
    networks:
      - anki_network
    restart: unless-stopped
    volumes:
      - ./server:/app
      - /app/node_modules

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: anki_client
    environment:
      - VITE_API_URL=http://localhost:4000
    ports:
      - "5173:5173"
    depends_on:
      - server
    networks:
      - anki_network
    restart: unless-stopped
    volumes:
      - ./client:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:

networks:
  anki_network:
    driver: bridge 